deepdive {

  pipeline.run: "cc_setup_cc_candidates_and_features"
  #pipeline.run: "cc_features_ext"
  #pipeline.run: "cc_candidate_ext"
  #pipeline.run: "term_ext"

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    is_cellular_component.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # takes all the articles we loaded, and runs them through the natural language processor
    ext_sentences: {
       input: """
         SELECT pmid,text
         FROM   pmc_articles
         ORDER BY pmid ASC
         """
       output_relation : "pmc_sentences"
       udf             : ${DEEPDIVE_HOME}"/examples/nlp_extractor/run.sh -k pmid -v text -l 20 -t 4"
       before          : ${APP_HOME}"/udf/before_sentences.sh"
       after           : ${APP_HOME}"/util/fill_sequence.sh pmc_sentences sentence_id"
    }

    # takes the parsed sentences, and attempts to pick out possibly biologically relevant terms
    ext_terms {
        input: """
          SELECT sentence_id, words, pos_tags, lemma, dependencies
          FROM   pmc_sentences
          """
        output_relation : "pmc_terms"
        udf             : ${APP_HOME}"/udf/ext_terms.py"
        before          : ${APP_HOME}"/udf/clear_table.sh pmc_terms"
        after           : ${APP_HOME}"/udf/fill_sequence.sh pmc_terms term_id"
        dependencies    : ["ext_sentences"]
     }

    # simply dumps the terms into the cellular component table, adding some training data
    ext_is_cellular_component_candidates {
        input: """
          SELECT DISTINCT text FROM pmc_terms
        """
        output_relation : "is_cellular_component"
        udf             : ${APP_HOME}"/udf/ext_cellular_component_candidates.py"
        before          : ${APP_HOME}"/udf/clear_table.sh is_cellular_component"
        after           : ${APP_HOME}"/udf/fill_sequence.sh is_cellular_component relation_id"
        dependencies    : ["ext_terms"]
    }

    # extract out the features we will use to decide if something is a cellular component
    ext_cc_features {
        input: """
          SELECT pmc_sentences.words,
                 pmc_sentences.lemma,
                 pmc_sentences.pos_tags,
                 pmc_sentences.dependencies,
                 is_cellular_component.relation_id,
                 is_cellular_component.term,
                 pmc_terms.start_position,
                 pmc_terms.length
          FROM   is_cellular_component,
                 pmc_terms,
                 pmc_sentences
          WHERE  is_cellular_component.term = pmc_terms.text
            AND  pmc_terms.sentence_id = pmc_sentences.sentence_id
          LIMIT  10
          """
        output_relation : "is_cellular_component_features"
        udf             : ${APP_HOME}"/udf/ext_is_cellular_component_features.py"
        before          : ${APP_HOME}"/udf/clear_table.sh is_cellular_component_features"
        dependencies    : ["ext_is_cellular_component_candidates"]
    }


  }

  # Put your inference rules here
  inference.factors {
#      f_has_spouse_features {
#         input_query : """
#           SELECT has_spouse.id       AS "has_spouse.id",
#                  has_spouse.is_true  AS "has_spouse.is_true",
#                  feature
#           FROM   has_spouse,
#                  has_spouse_features
#           WHERE  has_spouse_features.relation_id = has_spouse.relation_id
#           """
#         function : "IsTrue(has_spouse.is_true)"
#         weight   : "?(feature)"
#      }

#      f_has_spouse_symmetry {
#         input_query: """
#           SELECT  r1.is_true AS "has_spouse.r1.is_true",
#                   r2.is_true AS "has_spouse.r2.is_true",
#                   r1.id      AS "has_spouse.r1.id",
#                   r2.id      AS "has_spouse.r2.id"
#           FROM    has_spouse r1,
#                   has_spouse r2
#           WHERE   r1.person1_id = r2.person2_id
#             AND   r1.person2_id = r2.person1_id
#           """
#         function: "Equal(has_spouse.r1.is_true, has_spouse.r2.is_true)"
#         weight: "?"
#      }

  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25

  pipeline.pipelines {
    nlp_sentence_ext: [
        "ext_sentences"
    ]
    term_ext: [
        "ext_terms"
    ]
    
    cc_candidate_ext: [
        "ext_is_cellular_component_candidates"
    ]
    
    cc_features_ext: [
        "ext_cc_features"
    ]
    
    cc_setup_cc_candidates_and_features: [
        "ext_is_cellular_component_candidates",
        "ext_cc_features"
    ]
    
    
  }


}
